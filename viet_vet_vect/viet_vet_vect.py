# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VietVetVect
                                 A QGIS plugin
 This plugin helps the evaluation of vector-borne infection data from a Vietnamian survey.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-27
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Norbert Solymosi
        email                : solymosi.norbert@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
from qgis.core import QgsFeature
from qgis.core import Qgis
from qgis.core import QgsApplication
from qgis.core import QgsVectorLayer
from qgis.core import QgsCoordinateReferenceSystem
from qgis.core import QgsCoordinateTransform
from qgis.core import QgsCoordinateTransformContext
from qgis.core import QgsDataSourceUri
from qgis.utils import OverrideCursor
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QFileDialog
import webbrowser


# from qgis.PyQt import QtGui
# import pandas as pd

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .viet_vet_vect_dialog import VietVetVectDialog
from .sp_query_dlg import spQuery_dlg
from .clim_proj_dlg import climProj_dlg
from .db_query_dlg import dbQuery_dlg
import os.path


class VietVetVect:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VietVetVect_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&VietVetVect')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VietVetVect', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # icon_path = ':/plugins/viet_vet_vect/icon.png'
        self.add_action(
            ':/plugins/viet_vet_vect/mActionAdd3DMap.svg',
            text=self.tr(u'Load base maps'),
            callback=self.loadbase,
            parent=self.iface.mainWindow())

        self.add_action(
            ':/plugins/viet_vet_vect/dbmanager.svg',
            text=self.tr(u'DB query'),
            callback=self.dbquery,
            parent=self.iface.mainWindow())

        self.add_action(
            ':/plugins/viet_vet_vect/mActionCircleExtent.svg',
            text=self.tr(u'Buffering'),
            callback=self.buffering,
            parent=self.iface.mainWindow())
        
        self.add_action(
            ':/plugins/viet_vet_vect/mIconBrowserRelations.svg',
            text=self.tr(u'Spatial query'),
            callback=self.spquery,
            parent=self.iface.mainWindow())        
        
        self.add_action(
            ':/plugins/viet_vet_vect/mActionDecreaseBrightness.svg',
            text=self.tr(u'Query bioclimatic projection'),
            callback=self.climproj,
            parent=self.iface.mainWindow())    

        self.add_action(
            ':/plugins/viet_vet_vect/metadata.svg',
            text=self.tr(u'Help'),
            callback=self.help,
            parent=self.iface.mainWindow())                      

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&VietVetVect'),
                action)
            self.iface.removeToolBarIcon(action)

    def loadbase(self):
        with OverrideCursor(Qt.WaitCursor):
            dir = os.path.dirname(os.path.abspath(__file__))
            database = os.path.join(dir, 'maps/maps.sqlite') 
            uri = QgsDataSourceUri()
            uri.setDatabase(database)
            uri.setDataSource('', 'gadm41_VNM_0', 'geometry')
            clayer = QgsVectorLayer(uri.uri(), 'Country', 'spatialite')
            uri.setDataSource('', 'gadm41_VNM_1', 'geometry')
            player = QgsVectorLayer(uri.uri(), 'Provinces', 'spatialite')
            uri.setDataSource('', 'gadm41_VNM_2', 'geometry')
            dlayer = QgsVectorLayer(uri.uri(), 'Districts', 'spatialite')        
            uri.setDataSource('', 'gadm41_VNM_3', 'geometry')    
            colayer = QgsVectorLayer(uri.uri(), 'Communes', 'spatialite')                        
            QgsProject.instance().addMapLayer(clayer)
            QgsProject.instance().addMapLayer(player)
            QgsProject.instance().addMapLayer(dlayer)
            QgsProject.instance().addMapLayer(colayer)


    def dbquery(self):
        # if self.first_start == True:
        #     self.first_start = False
        self.dlg = dbQuery_dlg()
        
        self.dlg.setWindowTitle("Query infection data")
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems(["Anaplasma", "Babesia", "Theileria", "Trypanosoma evansi"])
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(['', "spring", "summer", "autumn", "winter"])                
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItems(['', "Buffalo", 'Cattle', "Goat", "Horse"])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result: 
            with OverrideCursor(Qt.WaitCursor): 
                if self.dlg.comboBox.currentText() == "Anaplasma":
                    fld = 'Ana'
                elif self.dlg.comboBox.currentText() == "Babesia":
                    fld = 'Babe'
                elif self.dlg.comboBox.currentText() == "Theileria":
                    fld = 'Theile'
                elif self.dlg.comboBox.currentText() == "Trypanosoma evansi":
                    fld = 'Tevansi'
                
                if self.dlg.comboBox_2.currentText() == "":
                    season = ''
                else:
                    season = " wd.Season='" + self.dlg.comboBox_2.currentText() + "'"
                
                if self.dlg.comboBox_3.currentText() == "":
                    host = ''
                else:
                    host = " wd.Animal_type='" + self.dlg.comboBox_3.currentText() + "'"        
                        
                b = ''
                lname = self.dlg.comboBox.currentText()
                if season != '':
                    b = ' where ' + season
                    lname = lname + '_' + self.dlg.comboBox_2.currentText()
                    if host != '':
                        b = b + ' and ' + host
                        lname = lname + '_' + self.dlg.comboBox_3.currentText()
                else:
                    if host != '':
                        b = ' where ' + host
                        lname = lname + '_' + self.dlg.comboBox_3.currentText()

                sql = "select a.Province, a.District, a.Commune, a.geometry, COALESCE(b.case_sum, 0) as case_num from (select distinct gadm41_VNM_3.NAME_2 as District, gadm41_VNM_3.NAME_3 as Commune, gadm41_VNM_3.NAME_1 as Province, geometry FROM gadm41_VNM_3 INNER JOIN wd ON gadm41_VNM_3.NAME_3=wd.Commune and gadm41_VNM_3.NAME_1=wd.Province) a LEFT JOIN (SELECT Province, Commune, sum(%s) as case_sum FROM wd%s group by Province, Commune) b on a.Commune=b.Commune and a.Province=b.Province" % (fld, b)
                dir = os.path.dirname(os.path.abspath(__file__))
                database = os.path.join(dir, 'maps/maps.sqlite') 
                uri = QgsDataSourceUri()
                uri.setDatabase(database)        
                uri.setDataSource('', "(" + sql + ")", 'geometry', '', '')
                vlayer = QgsVectorLayer(uri.uri(), lname, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer)
                
                # self.iface.messageBar().pushMessage("Success", sql, level=Qgis.Success, duration=10)
                # pass

    def help(self):
        webbrowser.open('https://raw.githubusercontent.com/solymosin/index/master/pages/vietvetvect.html')
        # https://raw.githubusercontent.com/solymosin/index/master/pages/vietvetvect.html
        # pass
        # database = r"/home/sn/dev/aote/Para/Vietnam/data/maps.sqlite"
        # uri = QgsDataSourceUri()
        # uri.setDatabase(database)
        # # schema = ''
        # # table = 'gadm41_VNM_3'
        # geom_column = 'geometry'
        # # uri.setDataSource(schema, table, geom_column)
        # # display_name = 'gadm41_VNM_3'
        # # vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
        # # QgsProject.instance().addMapLayer(vlayer)
        # uri.setDataSource('', 'select varname_3, geometry from gadm41_VNM_3', 'geometry')
        # display_name = 'province'
        # vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
        # QgsProject.instance().addMapLayer(vlayer)
        # 
        # database = r"/home/sn/dev/aote/Para/Vietnam/data/maps.sqlite"
        # uri = QgsDataSourceUri()
        # uri.setDatabase(database)        
        # sql = ''
        # uri.setDataSource('', "(" + sql + ")", 'geometry', '', '')
        # # uri.setDataSource('', '(SELECT gadm41_VNM_3.*, sum(Ana) as case_sum FROM gadm41_VNM_3 INNER JOIN wd ON wd.Commune = gadm41_VNM_3.NAME_3 and wd.Province = gadm41_VNM_3.NAME_1 group by gadm41_VNM_3.NAME_3)', 'geometry', '', '')
        # display_name = 'selected'
        # vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
        # QgsProject.instance().addMapLayer(vlayer)


    def climproj(self):
        # if self.first_start == True:
        #     self.first_start = False
        # Bioclimatic variables:
        # bio01 = Annual Mean Temperature
        # bio02 = Mean Diurnal Range (Mean of monthly (max temp - min temp))
        # bio03 = Isothermality (bio02/bio07) (×100)
        # bio04 = Temperature Seasonality (standard deviation ×100)
        # bio05 = Max Temperature of Warmest Month
        # bio06 = Min Temperature of Coldest Month
        # bio07 = Temperature Annual Range (bio05-bio06)
        # bio08 = Mean Temperature of Wettest Quarter
        # bio09 = Mean Temperature of Driest Quarter
        # bio10 = Mean Temperature of Warmest Quarter
        # bio11 = Mean Temperature of Coldest Quarter
        # bio12 = Annual Precipitation
        # bio13 = Precipitation of Wettest Month
        # bio14 = Precipitation of Driest Month
        # bio15 = Precipitation Seasonality (Coefficient of Variation)
        # bio16 = Precipitation of Wettest Quarter
        # bio17 = Precipitation of Driest Quarter
        # bio18 = Precipitation of Warmest Quarter
        # bio19 = Precipitation of Coldest Quarter

        self.dlg = climProj_dlg()
        
        self.dlg.setWindowTitle("Query bioclimatic projection")

        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems(["ACCESS-CM2", "CMCC-ESM2", "EC-Earth3-Veg", "GISS-E2-1-G", "INM-CM5-0", "IPSL-CM6A-LR", "MIROC6", "MPI-ESM1-2-HR", "MRI-ESM2-0", "UKESM1-0-LL"])
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(['ssp126','ssp245','ssp370','ssp585'])  
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItems(['2041-2060','2061-2080'])       
        self.dlg.comboBox_4.clear()
        self.dlg.comboBox_4.addItems(['Annual Mean Temperature', 'Annual Precipitation', 'Isothermality', 'Max Temperature of Warmest Month', 'Mean Diurnal Range', 'Mean Temperature of Coldest Quarter', 'Mean Temperature of Driest Quarter', 'Mean Temperature of Warmest Quarter', 'Mean Temperature of Wettest Quarter', 'Min Temperature of Coldest Month', 'Precipitation of Coldest Quarter', 'Precipitation of Driest Month', 'Precipitation of Driest Quarter', 'Precipitation of Warmest Quarter', 'Precipitation of Wettest Month', 'Precipitation of Wettest Quarter', 'Precipitation Seasonality', 'Temperature Annual Range', 'Temperature Seasonality'])
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:    
            with OverrideCursor(Qt.WaitCursor): 
                if self.dlg.comboBox_4.currentText() == 'Annual Mean Temperature':
                    fld = 'bio01'                    
                if self.dlg.comboBox_4.currentText() == 'Mean Diurnal Range':
                    fld = 'bio02'
                if self.dlg.comboBox_4.currentText() == 'Isothermality':
                    fld = 'bio03'
                if self.dlg.comboBox_4.currentText() == 'Temperature Seasonality':
                    fld = 'bio04'
                if self.dlg.comboBox_4.currentText() == 'Max Temperature of Warmest Month':
                    fld = 'bio05'
                if self.dlg.comboBox_4.currentText() == 'Min Temperature of Coldest Month':
                    fld = 'bio06'
                if self.dlg.comboBox_4.currentText() == 'Temperature Annual Range':
                    fld = 'bio07'
                if self.dlg.comboBox_4.currentText() == 'Mean Temperature of Wettest Quarter':
                    fld = 'bio08'
                if self.dlg.comboBox_4.currentText() == 'Mean Temperature of Driest Quarter':
                    fld = 'bio09'
                if self.dlg.comboBox_4.currentText() == 'Mean Temperature of Warmest Quarter':
                    fld = 'bio10'
                if self.dlg.comboBox_4.currentText() == 'Mean Temperature of Coldest Quarter':
                    fld = 'bio11'
                if self.dlg.comboBox_4.currentText() == 'Annual Precipitation':
                    fld = 'bio12'
                if self.dlg.comboBox_4.currentText() == 'Precipitation of Wettest Month':
                    fld = 'bio13'
                if self.dlg.comboBox_4.currentText() == 'Precipitation of Driest Month':
                    fld = 'bio14'
                if self.dlg.comboBox_4.currentText() == 'Precipitation Seasonality':
                    fld = 'bio15'
                if self.dlg.comboBox_4.currentText() == 'Precipitation of Wettest Quarter':
                    fld = 'bio16'
                if self.dlg.comboBox_4.currentText() == 'Precipitation of Driest Quarter':
                    fld = 'bio17'
                if self.dlg.comboBox_4.currentText() == 'Precipitation of Warmest Quarter':
                    fld = 'bio18'
                if self.dlg.comboBox_4.currentText() == 'Precipitation of Coldest Quarter':
                    fld = 'bio19'

                sql = "select gadm41_VNM_1.*, wc.mean as bioclim from gadm41_VNM_1 INNER JOIN wc on gadm41_VNM_1.gid_1=wc.gid where band=%s and gcm='%s' and ssp='%s' and period = '%s'" % (int(fld.replace('bio', '')), self.dlg.comboBox.currentText(), self.dlg.comboBox_2.currentText(), self.dlg.comboBox_3.currentText()) 
                lname = self.dlg.comboBox_4.currentText() + '_' + self.dlg.comboBox.currentText() + '_' + self.dlg.comboBox_2.currentText() + '_' + self.dlg.comboBox_3.currentText()
                dir = os.path.dirname(os.path.abspath(__file__))
                database = os.path.join(dir, 'maps/maps.sqlite') 
                uri = QgsDataSourceUri()
                uri.setDatabase(database)        
                uri.setDataSource('', "(" + sql + ")", 'geometry', '', '')
                vlayer = QgsVectorLayer(uri.uri(), lname, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer)

                # ln = self.dlg.comboBox.currentText() + '_' + self.dlg.comboBox_2.currentText() + '_' + self.dlg.comboBox_3.currentText() 
                # fld = os.path.dirname(os.path.abspath(__file__))
                # pth = os.path.join(fld, 'maps/wc2.1_10m_bioc_' + ln + '.shp')   
                # # self.iface.messageBar().pushMessage("Success", pth, level=Qgis.Success, duration=3)
    
                # vlayer = QgsVectorLayer(pth, ln, "ogr")
                # if not vlayer.isValid():
                #     print("Layer failed to load!")
                # else:
                #     QgsProject.instance().addMapLayer(vlayer)
                # # pass

    def getFldsbyqLyr(self):
        # model = QtGui.QStandardItemModel()
        # self.dlg.listView.setModel(model)        
        self.dlg.listWidget.clear()
        lyr = QgsProject.instance().mapLayersByName(self.dlg.comboBox.currentText())[0]
        fields = lyr.fields()   
        for field in fields:        
            self.dlg.listWidget.addItem(field.name())
            # item = QtGui.QStandardItem(field.name())
            # model.appendRow(item)
        
    def getFldsbysLyr(self):
        # model = QtGui.QStandardItemModel()
        # self.dlg.listView_2.setModel(model)          
        self.dlg.listWidget_2.clear()             
        lyr = QgsProject.instance().mapLayersByName(self.dlg.comboBox_2.currentText())[0]
        fields = lyr.fields()   
        for field in fields:      
            self.dlg.listWidget_2.addItem(field.name())  
            # item = QtGui.QStandardItem(field.name())
            # model.appendRow(item)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.csv')
        self.dlg.lineEdit.setText(filename)

    def spquery(self):
        # if self.first_start == True:
        #     self.first_start = False
        self.dlg = spQuery_dlg()
        
        self.dlg.setWindowTitle("Simple spatial query")
        layers = QgsProject.instance().layerTreeRoot().children()
        self.dlg.toolButton.clicked.connect(self.select_output_file)
        self.dlg.comboBox.currentTextChanged.connect(self.getFldsbyqLyr)
        self.dlg.comboBox_2.currentTextChanged.connect(self.getFldsbysLyr)      
        
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:     
            fldas = []        
            for item in self.dlg.listWidget.selectedItems():
                fldas.append(item.text())
            fldbs = []        
            for item in self.dlg.listWidget_2.selectedItems():
                fldbs.append(item.text())                

            with OverrideCursor(Qt.WaitCursor):     
                filename = self.dlg.lineEdit.text()
                with open(filename, 'w') as output_file:
                    line = ""
                    for flda in fldas:
                        line += flda + "; "                                                      
                    for fldb in fldbs:
                        line += fldb + "; " 
                    output_file.write(line + "\n")

                lyra = QgsProject.instance().mapLayersByName(self.dlg.comboBox.currentText())[0]
                lyrb = QgsProject.instance().mapLayersByName(self.dlg.comboBox_2.currentText())[0]
                trafo = QgsCoordinateTransform(lyra.crs(), lyrb.crs(), QgsCoordinateTransformContext())
                for fa in lyra.getFeatures():
                    ga = fa.geometry()
                    ga.transform(trafo)
                    for fb in lyrb.getFeatures():
                        gb = fb.geometry()
                        if ga.intersects(gb):  
                            line = ""
                            for flda in fldas:
                                line += str(fa.attribute(flda)) + "; "                                                      
                            for fldb in fldbs:
                                line += str(fb.attribute(fldb)) + "; "            
                            with open(filename, 'a') as output_file:
                                output_file.write(line + "\n")

                self.iface.messageBar().pushMessage("Success", "Output file written at " + filename, level=Qgis.Success, duration=3)


    def buffering(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        # if self.first_start == True:
        #     self.first_start = False
        self.dlg = VietVetVectDialog()

        self.dlg.setWindowTitle("Generate buffers around features")
        layers = QgsProject.instance().layerTreeRoot().children()
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.spinBox.setValue(10)
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.              
            with OverrideCursor(Qt.WaitCursor):     
                srcLayer = QgsProject.instance().mapLayersByName(self.dlg.comboBox.currentText())[0]
                trafo = QgsCoordinateTransform(srcLayer.crs(), QgsCoordinateReferenceSystem(3857), QgsCoordinateTransformContext())
                dstLayer = QgsVectorLayer('Polygon?crs=EPSG:3857', 'buffers_'+str(self.dlg.spinBox.value())+'_km_radius', 'memory')   
                dstLayer.startEditing()        
                fields = srcLayer.fields()   
                for field in fields:
                    dstLayer.addAttribute(field)   

                for feature in srcLayer.getFeatures():
                    g = feature.geometry()
                    g.transform(trafo)
                    b = g.buffer(self.dlg.spinBox.value()*1000, 50)
                    f = QgsFeature(dstLayer.fields())
                    for index, field in enumerate(srcLayer.fields()):
                        f.setAttribute(index, feature.attribute(field.name()))                    
                    f.setGeometry(b)      
                    dstLayer.addFeature(f)
                dstLayer.commitChanges()
                QgsProject.instance().addMapLayer(dstLayer)  

                # crsSrc = QgsCoordinateReferenceSystem(4326)
                # crsDest = QgsCoordinateReferenceSystem(3857)
                # trafo1 = QgsCoordinateTransform(crsSrc, crsDest)
                # transform = QgsCoordinateTransform(crsSrc, crsDest, QgsCoordinateTransformContext())            
                #selidx = self.dlg.comboBox.currentIndex()                   
                #self.iface.setActiveLayer(layers[selidx].layer())
                # srcLayer = QgsProject.instance().mapLayersByName(self.dlg.comboBox.currentText())[0]
                # self.iface.setActiveLayer(al)
                # srcLayer = self.iface.activeLayer()
                # trafo = QgsCoordinateTransform(srcLayer.crs(), QgsCoordinateReferenceSystem(3857), QgsCoordinateTransformContext())
                # self.iface.messageBar().pushMessage("Info", "Layer index: " + str(srcLayer.crs().authid()), level=Qgis.Info)
                # dstLayer = QgsVectorLayer("Polygon", "buffer", "memory")
                # dstLayer = QgsVectorLayer('Polygon?crs=EPSG:4326', 'buffer', 'memory')
                # dstLayer = QgsVectorLayer('Polygon?crs=EPSG:3857', 'buffers_'+str(self.dlg.spinBox.value())+'_km_radius', 'memory')   
                # https://gis.stackexchange.com/questions/351156/copying-attribute-values-to-new-layer-in-qgis-with-python
                # pr = dstLayer.dataProvider()
                # dstLayer.addAttributes(srcLayer.fields())
                # dstLayer.updateFields()    
                # dstLayer.startEditing()                                
                # for feature in srcLayer.getFeatures():
                    # geom = feature.geometry()
                    # buffer = geom.buffer(0.1, 50)
                    # feat = QgsFeature()
                    # feat.setGeometry(buffer)                
                    # g = feature.geometry()
                    # g.transform(trafo)
                    # b = g.buffer(self.dlg.spinBox.value()*1000, 50)
                    # f = QgsFeature()
                    # f.setGeometry(b)      
                    # f.setAttributes(feature.attributes())
                    # g = f.geometry()
                    # g.transform(transform)
                    # b = geom.buffer(10000, 50)                                
                #     dstLayer.addFeature(f)
                # dstLayer.commitChanges()
                # QgsProject.instance().addMapLayer(dstLayer)           
                # dstLayer = QgsVectorLayer('Polygon?crs=EPSG:3857', 'buffer', 'memory')
                # dstLayer.startEditing()
                # for feature in srcLayer.getFeatures():
                #     geom = feature.geometry()
                #     geom.transform(trafo1)
                #     buffer = geom.buffer(1000, 50)
                #     feat = QgsFeature()
                #     feat.setGeometry(buffer)
                #     self.iface.messageBar().pushMessage("Info", "Layer index: " + feat.geometry().asWkt() , level=Qgis.Info)
                #     dstLayer.addFeature(feat)
                # dstLayer.commitChanges()
                # QgsProject.instance().addMapLayer(dstLayer)
                #pass


